// netlify/functions/claude.js
const fetch = require("node-fetch");

exports.handler = async (event) => {
  const headers = {
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Content-Type",
    "Access-Control-Allow-Methods": "POST, OPTIONS",
    "Content-Type": "application/json",
  };

  // CORS preflight
  if (event.httpMethod === "OPTIONS") {
    return { statusCode: 204, headers };
  }

  if (event.httpMethod !== "POST") {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({ error: "Method Not Allowed" }),
    };
  }

  let body;
  try {
    body = JSON.parse(event.body);
  } catch (err) {
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: "Invalid JSON" }),
    };
  }

  const API_KEY = process.env.ANTHROPIC_API_KEY;
  if (!API_KEY) {
    console.error("Anthropic API key not set");
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: "Server misconfiguration" }),
    };
  }

  // –º–æ–¥–µ–ª—å –±–µ—Ä—ë–º –∏–∑ ENV –∏–ª–∏ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞, –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
  const MODEL = process.env.CLAUDE_MODEL || body.model || "claude-3-opus";

  if (!Array.isArray(body.messages)) {
    return {
      statusCode: 400,
      headers,
      body: JSON.stringify({ error: 'Need "messages": array' }),
    };
  }

  // –¢–µ–∫—Å—Ç-–ø–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è Claude
  const detailedPrompt = `–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –≤–µ–ª–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑—É –∏ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –æ—Ü–µ–Ω–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –ø–æ —Ñ–æ—Ç–æ —è–∑—ã–∫–∞. 
–í—ã–ø–æ–ª–Ω–∏ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –æ–ø–∏—à–∏ —Ü–≤–µ—Ç, —Ç–µ–∫—Å—Ç—É—Ä—É, –Ω–∞–ª–µ—Ç, —Ñ–æ—Ä–º—É, —Ç—Ä–µ—â–∏–Ω—ã –∏ –¥—Ä—É–≥–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —è–∑—ã–∫–∞.
2. üó∫Ô∏è –ó–æ–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: —Ä–∞–∑–¥–µ–ª–∏ —è–∑—ã–∫ –Ω–∞ –ø–µ—Ä–µ–¥–Ω—é—é, —Å—Ä–µ–¥–Ω—é—é, –∑–∞–¥–Ω—é—é –∏ –±–æ–∫–æ–≤—ã–µ –∑–æ–Ω—ã, –¥–∞–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –∫–∞–∂–¥–æ–π.
3. üéØ –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: —Å–≤—è–∂–∏ –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –∏ –∏–∑–±–µ–≥–∞—è –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤.
4. üíä –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø—Ä–µ–¥–ª–æ–∂–∏ –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–∏—Ç–∞–Ω–∏—é, –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏ –∏–ª–∏ –ë–ê–î–∞–º.
5. üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π, –∫–æ–≥–¥–∞ –∏ –∫–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–Ω–∏–º–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏.

**–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ (—Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON):**
\`\`\`json
{
  "detailed_analysis": "—Ç–µ–∫—Å—Ç",
  "zone_analysis": {
    "anterior": "—Ç–µ–∫—Å—Ç",
    "middle": "—Ç–µ–∫—Å—Ç",
    "posterior": "—Ç–µ–∫—Å—Ç",
    "lateral": "—Ç–µ–∫—Å—Ç"
  },
  "health_interpretation": "—Ç–µ–∫—Å—Ç",
  "wellness_recommendations": [
    { "product": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ" }
  ],
  "monitoring": "—Ç–µ–∫—Å—Ç"
}
\`\`\`

‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.`;

  // –ì–æ—Ç–æ–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Claude
  const claudeMessages = body.messages.map((m) => {
    if (m.role === "user" && typeof m.content === "string" && m.content.startsWith("data:image")) {
      // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Base64
      const [prefix, base64Data] = m.content.split(";base64,");
      const mediaType = prefix.replace("data:", "");
      return {
        role: "user",
        content: [
          {
            type: "image",
            source: {
              type: "base64",
              media_type: mediaType,
              data: base64Data,
            },
          },
          {
            type: "text",
            text: detailedPrompt,
          },
        ],
      };
    }
    // –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    return m;
  });

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Claude
  let resp;
  try {
    resp = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": API_KEY,
        "anthropic-version": "2023-06-01",
      },
      body: JSON.stringify({
        model: MODEL,
        max_tokens: 4000,
        messages: claudeMessages,
      }),
    });
  } catch (err) {
    console.error("Claude API request error:", err);
    return {
      statusCode: 502,
      headers,
      body: JSON.stringify({ error: err.message }),
    };
  }

  const data = await resp.json();
  if (!resp.ok) {
    console.error("Claude API error:", data);
    return {
      statusCode: resp.status,
      headers,
      body: JSON.stringify(data),
    };
  }

  // –í –æ—Ç–≤–µ—Ç–µ –æ–∂–∏–¥–∞–µ–º –ø–æ–ª–µ `completion`
  const completion = data.completion || (data.choices && data.choices[0]?.message?.content);
  if (!completion) {
    console.error("Invalid response format", data);
    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({ error: "Invalid response format", details: data }),
    };
  }

  return {
    statusCode: 200,
    headers,
    body: JSON.stringify({ completion: completion.trim() }),
  };
};
